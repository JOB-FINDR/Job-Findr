# Initial planning
- app idea


# MVP Planning
- User 
Authentication:
Users should be able to create accounts and log in.
- Job Listings:
Users should be able to post job listings.
Users should be able to browse job listings.
- Job Applications:
Users should be able to apply for jobs.


## Models:
## User Model: CR
- Fields:
- email: { type: String, unique: true, required: true },
- password: { type: String, required: true },
- name: { type: String, required: true },

## Job Model: → CRUD
Fields:
title: { type: String, required: true } - The title of the job.
company: { type: String, required: true } - The name of the hiring company.
description: { type: String, required: true } - A detailed description of the job.
salary: { type: Number } - The offered salary.

## Application Model → CR
Fields:
jobId: { type: ObjectId, ref: 'Job', required: true } - Reference to the applied job.
userId: { type: ObjectId, ref: 'User', required: true }
coverLetter: { type: String } - Cover letter submitted by the job seeker.



## REST API Endpoints:
Authentication Endpoints:
Sign-up: POST /api/auth/signup
Login: POST /api/auth/login
Logout: POST /api/auth/logout

## Job Endpoints:
Create Job Listing: POST /api/job
Read All Job Listings: GET /api/jobs
Read One Job Listing: GET /api/jobs/:id

## Application Endpoints:
Apply for Job: POST /api/applications
View Applications: GET /api/applications
Write a Cover Letter: PUT /api/applications/:id/cover-letter



[x] Define your MVP 
[x] what is the most essential functionality we need
[x]Define Models 	   
[x] what models do we need, what fields for each model
[x]Define REST API endpoints
